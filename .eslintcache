[{"/Users/whiskey/Projects/github-rails/github-issues-ui/src/App.js":"1","/Users/whiskey/Projects/github-rails/github-issues-ui/src/reportWebVitals.js":"2","/Users/whiskey/Projects/github-rails/github-issues-ui/src/issues/index.js":"3","/Users/whiskey/Projects/github-rails/github-issues-ui/src/issues/Issues.js":"4","/Users/whiskey/Projects/github-rails/github-issues-ui/src/components/MainAppBar.js":"5","/Users/whiskey/Projects/github-rails/github-issues-ui/src/issues/IssuesActions.js":"6","/Users/whiskey/Projects/github-rails/github-issues-ui/src/issues/IssuesService.js":"7","/Users/whiskey/Projects/github-rails/github-issues-ui/src/service/BaseService.js":"8","/Users/whiskey/Projects/github-rails/github-issues-ui/src/service/BaseApi.js":"9","/Users/whiskey/Projects/github-rails/github-issues-ui/src/store.js":"10","/Users/whiskey/Projects/github-rails/github-issues-ui/src/reducers.js":"11","/Users/whiskey/Projects/github-rails/github-issues-ui/src/issues/IssuesReducer.js":"12","/Users/whiskey/Projects/github-rails/github-issues-ui/src/index.js":"13","/Users/whiskey/Projects/github-rails/github-issues-ui/src/theme/default/colors.js":"14","/Users/whiskey/Projects/github-rails/github-issues-ui/src/theme/DefaultTheme.js":"15"},{"size":580,"mtime":1606568063121,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1606499975994,"results":"18","hashOfConfig":"17"},{"size":34,"mtime":1606568209005,"results":"19","hashOfConfig":"17"},{"size":5547,"mtime":1606661508247,"results":"20","hashOfConfig":"17"},{"size":947,"mtime":1606570701912,"results":"21","hashOfConfig":"17"},{"size":651,"mtime":1606589227712,"results":"22","hashOfConfig":"17"},{"size":335,"mtime":1606588417060,"results":"23","hashOfConfig":"17"},{"size":282,"mtime":1606584207950,"results":"24","hashOfConfig":"17"},{"size":424,"mtime":1606586625628,"results":"25","hashOfConfig":"17"},{"size":434,"mtime":1606569346855,"results":"26","hashOfConfig":"17"},{"size":133,"mtime":1606569624673,"results":"27","hashOfConfig":"17"},{"size":703,"mtime":1606569722150,"results":"28","hashOfConfig":"17"},{"size":500,"mtime":1606499975993,"results":"29","hashOfConfig":"17"},{"size":92,"mtime":1606570400598,"results":"30","hashOfConfig":"17"},{"size":368,"mtime":1606570449882,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"13sv222",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"/Users/whiskey/Projects/github-rails/github-issues-ui/src/App.js",[],["67","68"],"/Users/whiskey/Projects/github-rails/github-issues-ui/src/reportWebVitals.js",[],"/Users/whiskey/Projects/github-rails/github-issues-ui/src/issues/index.js",[],"/Users/whiskey/Projects/github-rails/github-issues-ui/src/issues/Issues.js",["69","70","71","72"],"import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport queryString from 'query-string';\nimport MainAppBar from '../components/MainAppBar';\nimport {\n  Grid,\n  Chip,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from '@material-ui/core';\n\nimport SelectField from '../components/SelectField';\n\nimport {clear, listIssues} from './IssuesActions';\n\nclass Issues extends React.Component {\n  static propTypes = {\n    listIssues: PropTypes.func.isRequired\n  }\n\n  state = {\n    loading: false,\n    username: 'rails',\n    repository: 'rails',\n    filters: {\n      labels: '',\n      sort: 'comments',\n      direction: 'desc',\n      page: 1,\n      per_page: 10,\n    },\n    issues: [],\n  }\n\n  componentDidMount() {\n    document.title = 'Github - Issues';\n\n    const {\n      username,\n      repository,\n      filters\n    } = this.state;\n\n    this.props.listIssues(username, repository, filters).then(() => {\n      const issues = this.props.issues;\n\n      this.setState({\n        ...this.state,\n        issues\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    this.props.clear();\n  }\n\n  onChange = async value => {\n    await this.setState({\n      filters: {\n        ...this.state.filters,\n        ...value\n      }\n    });\n\n    const {\n      username,\n      repository,\n      filters\n    } = this.state;\n\n    this.props.listIssues(username, repository, filters).then(() => {\n      const issues = this.props.issues;\n\n      this.setState({\n        ...this.state,\n        issues\n      });\n    });\n  }\n\n  displayLabels = labels => {\n    const labelNames = labels.map(label => {\n      return <Chip label={label.name} />\n    });\n\n    return labelNames;\n  }\n\n  render() {\n    const disableSubmit = this.state.loading;\n    const columns = [\n      { field: 'id', headerName: 'ID', width: 70 },\n      { field: 'title', headerName: 'Title', width: 130 },\n      { field: 'state', headerName: 'State', width: 130 }\n    ];\n    const sortDirection = [{ name: 'Asc', id: 'asc' }, { name: 'Desc', id: 'desc' }];\n    const labels = [\n      {\n        name: 'ActionCable',\n        id: 'actioncable'\n      },\n      {\n        name: 'ActionMailer',\n        id: 'actionmailer'\n      },\n      {\n        name: 'ActionPack',\n        id: 'actionpack'\n      },\n      {\n        name: 'ActionView',\n        id: 'actionview'\n      },\n      {\n        name: 'ActiveJob',\n        id: 'activejJob'\n      },\n      {\n        name: 'ActiveModel',\n        id: 'activemodel'\n      },\n      {\n        name: 'ActiveRecord',\n        id: 'activerecord'\n      },\n      {\n        name: 'ActiveStorage',\n        id: 'activestorage'\n      },\n      {\n        name: 'ActiveSupport',\n        id: 'activesupport'\n      },\n      {\n        name: 'AssetPipeline',\n        id: 'assetpipeline'\n      },\n    ];\n\n    return (\n      <React.Fragment>\n        <MainAppBar />\n\n        <main>\n          <Grid container spacing={3} justify=\"center\" alignItems=\"center\" className=\"filters-menu\">\n            <Grid item xs={2}>\n              <SelectField\n                id=\"labels\"\n                name=\"labels\"\n                label=\"Label\"\n                value={this.state.filters.label}\n                items={labels}\n                onChange={this.onChange}\n              />\n            </Grid>\n\n            <Grid item xs={2}>\n              <SelectField\n                id=\"direction\"\n                name=\"direction\"\n                label=\"Comments Count Sort\"\n                value={this.state.filters.direction}\n                items={sortDirection}\n                onChange={this.onChange}\n              />\n            </Grid>\n          </Grid>\n\n          <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" className=\"issues-list\">\n            <Grid item xs={12}>\n              <TableContainer component={Paper} className=\"issues-list__table\">\n                <Table>\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>ID</TableCell>\n                      <TableCell align=\"left\">Title</TableCell>\n                      <TableCell align=\"left\">Comments</TableCell>\n                      <TableCell align=\"left\">State</TableCell>\n                      <TableCell align=\"left\">Labels</TableCell>\n                    </TableRow>\n                  </TableHead>\n\n                  <TableBody>\n                    {this.state.issues.map((row) => (\n                      <TableRow key={row.id}>\n                        <TableCell component=\"th\" scope=\"row\">\n                          {row.id}\n                        </TableCell>\n\n                        <TableCell align=\"left\">{row.title}</TableCell>\n                        <TableCell align=\"left\">{row.comments}</TableCell>\n                        <TableCell align=\"left\">{row.state}</TableCell>\n                        <TableCell align=\"left\">{this.displayLabels(row.labels)}</TableCell>\n                      </TableRow>\n                    ))}\n                </TableBody>\n                </Table>\n              </TableContainer>\n            </Grid>\n          </Grid>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapDispatcherToPros = dispatcher => ({\n  clear: () => dispatcher(clear()),\n  listIssues: (username, repository, filters) => dispatcher(listIssues(username, repository, filters))\n});\n\nconst mapStateToProps = state => {\n  const {issues: listIssuesState} = state;\n\n  return {...listIssuesState};\n};\n\nexport default connect(mapStateToProps, mapDispatcherToPros)(Issues);\n","/Users/whiskey/Projects/github-rails/github-issues-ui/src/components/MainAppBar.js",[],["73","74"],"/Users/whiskey/Projects/github-rails/github-issues-ui/src/issues/IssuesActions.js",[],"/Users/whiskey/Projects/github-rails/github-issues-ui/src/issues/IssuesService.js",[],"/Users/whiskey/Projects/github-rails/github-issues-ui/src/service/BaseService.js",[],"/Users/whiskey/Projects/github-rails/github-issues-ui/src/service/BaseApi.js",[],"/Users/whiskey/Projects/github-rails/github-issues-ui/src/store.js",[],"/Users/whiskey/Projects/github-rails/github-issues-ui/src/reducers.js",[],"/Users/whiskey/Projects/github-rails/github-issues-ui/src/issues/IssuesReducer.js",["75"],"import {\n  GET_REQUEST,\n  GET_SUCCESS,\n  GET_FAILURE,\n  CLEAR\n} from './IssuesActions';\n\nconst initialState = {\n  errors: [],\n  loading: false\n};\n\nexport default (state = initialState, action) => {\n  const {type, issues} = action;\n\n  switch (type) {\n    case GET_REQUEST:\n      return {\n        ...state,\n        loading: true\n      };\n    case GET_SUCCESS:\n      return {\n        ...state,\n        issues,\n        success: true,\n        loading: false\n      };\n    case GET_FAILURE:\n      return {\n        ...state,\n        success: false,\n        loading: false,\n        errors: action.errors\n      };\n\n    case CLEAR:\n      return {...state, ...initialState};\n    default:\n      return state;\n  }\n};\n","/Users/whiskey/Projects/github-rails/github-issues-ui/src/index.js",[],"/Users/whiskey/Projects/github-rails/github-issues-ui/src/theme/default/colors.js",["76"],"export default {\n  pink: {\n    300: '#f06292',\n    500: '#e91e63'\n  },\n  grey: '#e0e0e0'\n};\n","/Users/whiskey/Projects/github-rails/github-issues-ui/src/theme/DefaultTheme.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":4,"column":8,"nodeType":"83","messageId":"84","endLine":4,"endColumn":19},{"ruleId":"81","severity":1,"message":"85","line":16,"column":3,"nodeType":"83","messageId":"84","endLine":16,"endColumn":13},{"ruleId":"81","severity":1,"message":"86","line":98,"column":11,"nodeType":"83","messageId":"84","endLine":98,"endColumn":24},{"ruleId":"81","severity":1,"message":"87","line":99,"column":11,"nodeType":"83","messageId":"84","endLine":99,"endColumn":18},{"ruleId":"77","replacedBy":"88"},{"ruleId":"79","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":13,"column":1,"nodeType":"92","endLine":42,"endColumn":3},{"ruleId":"90","severity":1,"message":"93","line":1,"column":1,"nodeType":"92","endLine":7,"endColumn":3},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'queryString' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.","'disableSubmit' is assigned a value but never used.","'columns' is assigned a value but never used.",["94"],["95"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Assign object to a variable before exporting as module default","no-global-assign","no-unsafe-negation"]